#+TITLE:       Git
#+AUTHOR:      kyle Three Stone
#+DATE:        <2018-05-24 Thu>
#+EMAIL:       kyleemail@163.com
#+OPTIONS:     H:3 num:t toc:t \n:nil @:t ::t |:t ^:t f:t tex:t
#+TAGS:        Git, Linux
#+CATEGORIES:  Git

** 简介
Git 是用 C 语言开发的分布式版本控制系统。

Git 保存的不是文件差异或者变化量，而只是一系列文件快照。而其他系统在每个版本中记录着各个文件的具体差
异。Git 并不保存这些前后变化的差异数据。实际上，Git 更像是把变化的文件作快照后，记录在一个微型的文件
系统中。每次提交更新时，它会纵览一遍所有文件的指纹信息并对文件作一快照，然后保存一个指向这次快照的索
引。为提高性能，若文件没有变化，Git 不会再次保存，而只对上次保存的快照作一链接。

在 Git 中提交时，会保存一个提交（commit）对象，该对象包含一个指向暂存内容快照的指针，包含本次
提交的作者等相关附属信息，包含零个或多个指向该提交对象的父对象指针。

 Git 中的绝大多数操作都只需要访问本地文件和资源，不用连网。

保存到 Git 之前，所有数据都要进行内容的校验和（checksum）计算，并将此结果作为数据的唯一标识和索引。
这项特性作为 Git 的设计哲学，建在整体架构的最底层。所以如果文件在传输时变得不完整，或者磁盘损坏导致
文件数据缺失，Git 都能立即察觉。Git 使用 SHA-1 算法计算数据的校验和，通过对文件的内容或目录的结构计
算出一个 SHA-1 哈希值，作为指纹字符串。该字串由 40 个十六进制字符组成。Git 的工作完全依赖于这类指纹
字串，所以你会经常看到这样的哈希值。实际上，所有保存在 Git 数据库中的东西都是用此哈希值来作索引的，
而不是靠文件名。

对于任何一个文件，在 Git 内都只有三种状态：已提交（committed），已修改（modified）和已暂存（staged）

** 安装

#+BEGIN_SRC shell
$ apt-get install git
#+END_SRC

** 配置
命令 git config 专门用来配置或读取相应的工作环境变量，这些环境变量决定了 git 在各个环节的具体工作方
式和行为，存在在三个地方：
1. /etc/gitconfig 文件：系统中所有用户都普遍适用的配置；使用 git config 时用--system 选项，读写的就
   是这个文件
2. ~/.gitconfig 文件：只适用该用户，使用 --global 选项时读写该文件；一般我们只配置该文件
3. .git/config 文件：进对该项目有效。每一级别的配置都会覆盖上层的相同配置

首先需要配置用户名称和电子邮件地址，这两条配置很重要，每次提交的时候都会随更新一起被纳入历史记录
#+BEGIN_SRC shell
$ git config --global user.name "kyle"
$ git config --global user.email "kyleemail@163.com"
#+END_SRC

为了把本地仓库上传到 GitHub ，需要配置 sshkey 。
#+BEGIN_SRC shell
$ ssh-keygen -t rsa -C "kyleemail@163.com"
#+END_SRC
之后会要求输入路径和密码，采用默认值，直接回车就可以。成功后会生成 ssh 的密钥对，放置在 ~/.ssh 目录
下 id_rsa 、id_rsa.pub 两个文件。登录自己的 GitHub 账号，进入 Account Setting ，左侧选择 SSH keys -
Add ssh key ，title 可以随意写，将前面生成的 id_rsa.pub 文件中的内容粘贴到 key 中即可。然后验证是否
成：
#+BEGIN_SRC shell
$ ssh -T git@github.com
#+END_SRC
第一次会提示是否 continue ，输入 yes 会看到： You've successfully authenticated, but GitHub does not 
provide shell access. 表示已经成功连上 GitHub。

Git 并不会在你输入部分命令时自动推断出你想要的命令。 如果不想每次都输入完整的 Git 命令，可以通过 git
config 文件来轻松地为每一个命令设置一个别名。
#+BEGIN_SRC shell
$ git config --global alias.co checkout
$ git config --global alias.br branch
$ git config --global alias.ci commit
$ git config --global alias.st status
#+END_SRC
** 帮助

#+BEGIN_SRC shell
$ git help <verb> # git help add
$ git <verb> --help # git reset --help
$ man git-<verb> # man git-checkout
#+END_SRC

** 使用
#+BEGIN_SRC shell
$ mkdir test
$ cd test
$ touch main.c
$ git init # 初始化一个版本库，生成 .git 目录
$ git add main.c
$ git add -A # 添加所有文件到暂存区
$ vim main.c
$ git diff
$ git status
$ git clean -df # 清除所有未跟踪的文件，或略 .igmored 文件
$ git commit -m "first commit" main.c
$ git log # 
$ git log -p -2 # 显示最近 2 次提交的内容差异
$ git log --stat # 显示增改行数统计
$ git reflog # 查看命令历史
$ git tag -a tag1 -m "tag注释" # 新建标签
$ git tag -l # 列出所有的标签 git tag -l <name>
$ git tag -d tag1 # 删除 tag1 标签
$ git remote add origin git@github.com:chinasanshi/test.git 
# 添加远程仓库，远程仓库名字为 origin（git clone 时默认远程仓库名称为 origin ）
$ git push origin master # 把本地 master 分支推送到远程仓库
$ git push origin -tags # 将本地标签全部提交到远程仓库
# git push origin <分支名> <tag name>
# git push origin :<tag name> # 删除远端标签
$ git rm main.c # 移除跟踪文件
$ git clone /opt/git/progect.git # 从本地远程仓库拷贝
$ git clone file:///opt/git/progect.git
$ git clone ssh://user@server/progect.git
$ git clone user@server/progect.git # 
$ git clone git@github.com:chinasanshi/blog-source.git
$ git clone https://github.com/chinasanshi/blog-source.git
#+END_SRC

此时已经可以完成 git 的基本使用


** 版本恢复

git 有工作目录、暂存区（index）、版本库。

cheakout : cheakout a branch or path to the working tree

*checkout 命令用于从历史提交中拷贝文件到工作目录，记住该命令主要用于恢复工作区。* 
#+BEGIN_SRC shell
$ git cheakout -- main.c # 从暂存区拷贝到工作区
$ git checkout HEAD -- main.c # 从 HEAD 拷贝到工作区及暂存区；HEAD 表示当前版本，HEAD^ 上一个，
# HEAD^^ 上上一个，HEAD~100 上 100 个
#+END_SRC

reset ：reset current HEAD to specified state

*reset 命令主要用于将当前分支指向另一个位置，该命令的本质就是用来移动分支的位置*
#+BEGIN_SRC shell
$ git reset -- main.c # 将提交拷贝到暂存区
$ git reset HEAD -- main.c # 将提交拷贝到暂存区
$ git reset HEAD~3 # 将当前分支移动到倒数第三次提交
$ git reset --hard 3627164 # 将当前分支移动到指定的提交，并拷贝到暂存区和工作区
$ git rese --soft da985 # 将当前分支移动到指定的提交，但并不改变暂存区和工作区
#+END_SRC

diff ：比较差异
#+BEGIN_SRC shell
$ git diff da985 b325c # 比较两次提交的差异
$ git diff --cached # 比较提交与暂存区的差异
$ git diff # 比较暂存区与工作区的差异
$ git diff a47c3 # 比较指定的提交与工作区的差异
$ git diff tag1 # 比较指定标签与工作区的差异
#+END_SRC

** 分支

在很多版本控制系统中，这是个昂贵的过程，常常需要创建一个源代码目录的完整副本，对大型项目来说会花费很
长时间。Git 的分支可谓是难以置信的轻量级，它的新建操作几乎可以在瞬间完成，并且在不同分支间切换起来也
差不多一样快。和许多其他版本控制系统不同，Git 鼓励在工作流程中频繁使用分支与合并。


在 Git 中提交时，会保存一个提交（commit）对象。使用 git commit 新建一个提交对象前，Git 会先计算每一
个子目录/文件的校验和（40 字符的 SHA-1 哈希字串），然后在 Git 仓库中将这些目录保存为树（tree）对象，
该树对象存储了指向所有文件快照的指针。之后 Git 创建的提交对象，除了包含相关提交信息（作者、邮箱、描
述信息等）以外，还包含着指向这个树对象的指针。另外下一次提交会保存一个指向上一次提交的指针 parent，
普通提交有一个祖先，由两个或多个分支合并产生的提交则有多个祖先。

Git 中的分支，其实本质上仅仅是个指向 commit 对象的指针，当然是一个可以指向不同 commit 的可变指针。
Git 会使用 master 作为分支的默认名字，它在每次提交的时候都会自动向前移动。

Git 创建一个新的分支仅仅是创建一个新的分支指针，分支实际上仅是一个包含所指对象校验和（40 个字符长度
SHA-1 字串）的文件，所以创建和销毁一个分支就变得非常廉价。新建一个分支就是向一个文件写入 41 个字节
（外加一个换行符）那么简单，当然也就很快了。

#+BEGIN_SRC shell
$ git branch kyle # 仅仅是建立了一个新的分支 kyle，但不会自动切换到这个分支中去
$ git bracnch # 查看当前分支清单
$ git branch -v # 查看各个分支最后一个提交对象的信息
$ git checkout kyle # 切换到 kyle 分支
$ git checkout -b sanshi # 新建 sanshi 分支并切换到该分支
$ git branch -m kyle kyl # 修改 kyle 分支名为 kyl
$ git branch -d kyl # 删除 kyl 分支
$ git branch -r # 查看远程分支
$ git branch -a # 查看本地和远端分支
$ git checkout master # 切换到 master 分支
$ git merge shanshi # 将 sanshi 分支合并到 master 分支；若有冲突，需要手动解决；
# Git 为分支合并自动识别出最佳的同源合并点，
# Git 使用简单的三方合并（两个分支的末端以及它们的共同祖先）
$ git branch --merged # 查看哪些分支已被并入当前分支
$ git branch --no-merged # 尚未与当前分支合并的分支
$ git push origin sanshi # 将 sanshi 分支推送到远端
$ git push origin --delete sanshi # 删除远端 sanshi 分支
#+END_SRC

Git 保存着一个名为 HEAD 的特别指针，指向你正在工作中的本地分支的某次提交（未移动时为最后一次提交）。
HEAD 在你转换分支时指向新的分支，并且每次提交后 HEAD 随着分支一起向前移动。

分支会让历史提交分叉，可以分别在不同的分支上进行不同的提交，这些改变分别孤立在不同的分支里：我们可以
在不同分支里反复切换，并在时机成熟时把它们合并到一起。Git 鼓励开发者频繁使用分支。

#+BEGIN_SRC shell
$ git checkout experiment
$ git rebase master
#+END_SRC
*一旦分支中的提交对象发布到公共仓库，就千万不要对该分支进行变基操作。* 如果你遵循这条金科玉律，就不会出
差错。在进行变基的时候，实际上抛弃了一些现存的提交对象而创造了一些类似但不同的新的提交对象。
