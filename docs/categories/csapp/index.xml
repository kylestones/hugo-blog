<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>csapp on Org Mode</title>
    <link>https://kylestones.github.io/hugo-blog/categories/csapp/</link>
    <description>Recent content in csapp on Org Mode</description>
    <image>
      <url>https://kylestones.github.io/hugo-blog/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://kylestones.github.io/hugo-blog/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://kylestones.github.io/hugo-blog/categories/csapp/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Computer Systems - A Programmer&#39;s Perspective</title>
      <link>https://kylestones.github.io/hugo-blog/blog/apue/csapp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kylestones.github.io/hugo-blog/blog/apue/csapp/</guid>
      <description>局部性   局部性良好的代码速度会大大提高  分为时间局部性和空间局部性；时间局部性表明一个变量在不远的将来会再次被访问；空间局部性表明一个变量周围的变量很快会被访问。  代码提升的关键在于充分利用高速缓存 cache (CPU 和主存读写速度之间的差距在不断增大） 程序的机器级表示   汇编代码以及机器码都不包含任何变量名字以及类型信息 。程序就仅仅是一些数字序列而已。  在代码中假如汇编的方法：    函数使用汇编代码实现，然后链接的回收使用    使用 GCC 提供的选项，直接在 C 函数中插入汇编代码   x86-64 16 个通用寄存器    Instruction pointer    %rip   Stack pointer    %rsp   Return value    %rax   Arguments passed in registers    %rdi, %rsi, %rdx, %rcx, %r8, %r9   Callee-saved    %rbx, %r12, %r13, %r14, %rbp, %rsp   Caller-saved    %rdi, %rsi, %rdx, %rcx, %r8, %r9, %rax, %r10, %r11    x86-64 惯例，操作 32 位寄存器，会将该寄存器的高 32 位设置为 0 。 栈   栈的地址向下增长，即每次压栈都会导致寄存器 %rsp 的值减小。大多数函数都需要栈帧（栈上的一段内存）来保存信息，栈帧的结构从 栈底到栈顶依次为    保存的 callee-saved 寄存器的值    局部变量    调用其他函数需要的 6 个参数寄存器以外的内存    返回地址    程序使用栈完成函数调用，此时主要由寄存器 %rip 以及 %rsp 完成    callq 指令完成将 callq 的下一条指令地址压栈，并 jump 到被调函数的第一条指令    ret 指令从栈中弹出之前保存在栈上的地址，并 jump 到该地址    以上是栈固定的时候  动态数组需要不定大小的栈，此时需要寄存器 %rbp 辅助实现。   ret 指令等效于    popd %rip; jump %rip   leave 指令等效于    movq %rbp, %rsp; popd %rbp   堆   由 glic 负责维护，使用 sbrk 系统调用来申请内存，然后 glic 提供 malloc 和 free 接口供应用程序使用。 实现自己的 malloc free 函数   要求：   Handling arbitrary request sequences    malloc 和 free 可能是任意的顺序   Making immediate responses to requests    不可以缓存请求或者对请求重新排序，必须立即响应   Using only the heap    函数使用的结构体 (nonscalar data) 必须存储在 heap 中   Aligning blocks    8 字节对齐   Not modifying allocated blocks    不可以对已经分配的 blocks 进行修改    目标：   Maximizing throughput    每秒钟响应请求的次数   Maximizing memory utilization    heap 峰值使用率（aggregate payload / total heap)    Implementation Issues   Free block origanization    怎样保存 free blocks ；隐士链表，显示链表   Placement    选择合适 free block 作为新申请的 block ； first fit, next fit, best fit   Splitting    是否以及怎样分割 block 中剩余的部分   Coalescing    怎样合并被释放的 block ； 考虑 previous 和 next 是否是 free 共分为四种情况    之前尝试写过几天，但是后来重装系统，换电脑等。 I lost my code.</description>
    </item>
    
  </channel>
</rss>
